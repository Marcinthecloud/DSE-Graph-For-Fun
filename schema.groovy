schema.config().option('graph.schema_mode').set('Development')


schema.propertyKey("summary").Text().single().create()
schema.propertyKey("timestampAsText").Text().single().create()
schema.propertyKey("question").Text().single().create()
schema.propertyKey("answerType").Text().single().create()
schema.propertyKey("rating").Double().single().create()
schema.propertyKey("description").Text().single().create()
schema.propertyKey("title").Text().single().create()
schema.propertyKey("imUrl").Text().single().create()
schema.propertyKey("answer").Text().single().create()
schema.propertyKey("price").Double().single().create()
schema.propertyKey("name").Text().single().create()
schema.propertyKey("customerId").Text().single().create()
schema.propertyKey("rank").Int().single().create()
schema.propertyKey("asin").Text().single().create()
schema.propertyKey("helpful").Double().single().create()
schema.propertyKey("brand").Text().single().create()
schema.propertyKey("questionType").Text().single().create()
schema.propertyKey("reviewText").Text().single().create()
schema.propertyKey("timestamp").Timestamp().single().create()
schema.edgeLabel("viewed_with").multiple().create()
schema.edgeLabel("also_bought").multiple().create()
schema.edgeLabel("has_question").multiple().create()
schema.edgeLabel("reviewed").multiple().properties("rating", "helpful", "summary", "reviewText", "timestampAsText", "timestamp").create()
schema.edgeLabel("purchased_with").multiple().create()
schema.edgeLabel("belongs_in_category").multiple().create()
schema.edgeLabel("has_salesRank").multiple().properties("rank").create()
schema.edgeLabel("bought_after_viewing").multiple().create()
schema.vertexLabel("Item").properties("description", "title", "imUrl", "price", "asin", "brand").create()
schema.vertexLabel("Item").index("byasin").materialized().by("asin").add()
schema.vertexLabel("Category").properties("name").create()
schema.vertexLabel("Category").index("byname").materialized().by("name").add()
schema.vertexLabel("Customer").properties("name", "customerId").create()
schema.vertexLabel("Customer").index("bycustomerId").materialized().by("customerId").add()
schema.vertexLabel("Question").properties("answerType", "answer", "questionType", "timestampAsText", "question", "timestamp").create()
schema.edgeLabel("viewed_with").connection("Item", "Item").add()
schema.edgeLabel("also_bought").connection("Item", "Item").add()
schema.edgeLabel("has_question").connection("Item", "Question").add()
schema.edgeLabel("reviewed").connection("Customer", "Item").add()
schema.edgeLabel("purchased_with").connection("Item", "Item").add()
schema.edgeLabel("belongs_in_category").connection("Item", "Category").add()
schema.edgeLabel("has_salesRank").connection("Item", "Category").add()
schema.edgeLabel("bought_after_viewing").connection("Item", "Item").add()
schema.vertexLabel("Item").index("byBrand").materialized().by("brand").add()
schema.vertexLabel('Customer').index('byName').materialized().by('name').add()

schema.vertexLabel("Customer").index("reviewsByTime").outE("reviewed").by("timestamp").add();
schema.vertexLabel('Item').index('byCustomerRating').inE('reviewed').by('rating').add()
schema.vertexLabel('Item').index('byReviewTimestamp').inE('reviewed').by('timestamp').add()
schema.vertexLabel('Category').index('byItemSalesRank').inE('has_salesRank').by('rank').add()

schema.vertexLabel('Item').index('search').search().by('title').asText().by('description').asText().by('price').add()
schema.vertexLabel('Category').index('search').search().by('name').asText().add()
schema.vertexLabel("Question").index("search").search().by("question").asText().by("answer").asText().by("answerType").asString().add();
